{"version":3,"sources":["Grid.styles.js","Grid.js","App.js","index.js"],"names":["createUseStyles","grid","display","gridTemplateRows","gridTemplateColumns","width","height","outline","position","left","cell","cursor","background","Array","from","length","on","color","operations","App","useState","rows","i","push","setGrid","running","setRunning","runningRef","useRef","current","runSimulation","useCallback","g","produce","gridCopy","k","neighbours","forEach","x","y","newI","newK","setTimeout","onClick","style","map","col","newGrid","backgroundColor","undefined","border","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wTAEeA,YAAgB,CAC7BC,KAAM,CACJC,QAAS,OACTC,iBAAkB,kBAClBC,oBAAqB,kBACrBC,MAAO,OACPC,OAAQ,OACRC,QAAS,mBACTC,SAAU,WACVC,KAAO,WAETC,KAAM,CACJC,OAAO,UACPJ,QAAS,mBACTK,WAAY,WCZKC,MAAMC,KAAK,CAAEC,OAAQ,MAAM,iBAAO,CACnDC,IAAI,EACJC,MAAO,Y,WCELC,EAAa,CACjB,CAAC,EAAG,GACJ,CAAC,GAAI,GACL,CAAC,GAAI,GACL,EAAE,EAAG,GACL,CAAC,EAAG,GACJ,EAAE,GAAI,GACN,CAAC,EAAG,GACJ,EAAE,EAAG,IAwFQC,MArFf,WACE,MAAwBC,oBAAS,WAE/B,IADA,IAAMC,EAAO,GACJC,EAAI,EAAGA,EAhBJ,GAgBgBA,IAC1BD,EAAKE,KAAKV,MAAMC,KAAKD,MAhBX,KAgB2B,kBAAM,MAE7C,OAAOQ,KALT,mBAAOpB,EAAP,KAAauB,EAAb,KAWA,EAA8BJ,oBAAS,GAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KAEMC,EAAaC,iBAAOH,GAC1BE,EAAWE,QAAUJ,EAErB,IAAMK,EAAgBC,uBAAY,WAC3BJ,EAAWE,UAIhBL,GAAQ,SAACQ,GACP,OAAOC,YAAQD,GAAG,SAAAE,GAChB,IAD6B,IAAD,WACnBZ,GACT,IAF4B,eAEnBa,GACL,IAAIC,EAAa,EACjBlB,EAAWmB,SAAQ,YAAa,IAAD,mBAAVC,EAAU,KAAPC,EAAO,KACvBC,EAAOlB,EAAIgB,EACXG,EAAON,EAAII,EACbC,GAAQ,GAAKA,EA3Cf,IA2CiCC,GAAQ,GAAKA,EA1C9C,KA2CAL,GAAcJ,EAAEQ,GAAMC,OAItBL,EAAa,GAAKA,EAAa,EACjCF,EAASZ,GAAGa,GAAK,EACI,IAAZH,EAAEV,GAAGa,IAA0B,IAAdC,IAC1BF,EAASZ,GAAGa,GAAI,IAbbA,EAAI,EAAGA,EArCR,GAqCqBA,IAAM,EAA1BA,IADAb,EAAG,EAAGA,EArCP,GAqCmBA,IAAM,EAAxBA,SAuBboB,WAAWZ,EAAe,QACzB,IAGH,OACE,qCACA,wBAAQa,QAAS,WACbjB,GAAYD,GACPA,IACHE,EAAWE,SAAU,EACrBC,MAJN,SAMIL,EAAU,OAAS,UACvB,qBAAMmB,MAAQ,CACZ1C,QAAS,OACTE,oBAAoB,UAAD,OA1ET,GA0ES,YAFrB,SAIGH,EAAK4C,KAAI,SAACxB,EAAMC,GAAP,OAAaD,EAAKwB,KAAI,SAACC,EAAIX,GAAL,OAAW,qBAE3CQ,QAAW,WACT,IAAMI,EAAUd,YAAQhC,GAAM,SAAAiC,GAC5BA,EAASZ,GAAGa,GAAKlC,EAAKqB,GAAGa,GAAK,EAAI,KAEpCX,EAAQuB,IAEVH,MACE,CACEvC,MAAQ,GACRC,OAAQ,GACR0C,gBAAiB/C,EAAKqB,GAAGa,GAAK,YAASc,EACvCC,OAAQ,oBAb+B,UACjC5B,EADiC,cAC1Ba,gBC/EvBgB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.b43a25d7.chunk.js","sourcesContent":["import { createUseStyles } from 'react-jss'\r\n\r\nexport default createUseStyles({\r\n  grid: {\r\n    display: 'grid',\r\n    gridTemplateRows: 'repeat(10, 1fr)',\r\n    gridTemplateColumns: 'repeat(10, 1fr)',\r\n    width: '70vw',\r\n    height: '50vw',\r\n    outline: '1px dotted black',\r\n    position: 'relative',\r\n    left : '1.5625%'\r\n  },\r\n  cell: {\r\n    cursor:'pointer',\r\n    outline: '1px dotted black',  \r\n    background: 'white'\r\n  }\r\n})","import React, { useState } from 'react'\r\nimport './Grid.css'\r\nimport useStyles from './Grid.styles';\r\n\r\nconst initialCells = Array.from({ length: 100}, () => ({\r\n    on: false,\r\n    color: 'white',\r\n}))\r\n\r\nexport default function Grid() {\r\n    \r\n    return (\r\n        <div>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import { useCallback, useState, useRef} from 'react';\nimport './App.css';\nimport ButtonGroup  from './ButtonGroup'\nimport Grid from './Grid'\nimport produce from 'immer'\n\nconst numRows = 50;\nconst numCols = 50;\nconst operations = [\n  [0, 1],\n  [0, -1],\n  [1, -1],\n  [-1, 1],\n  [1, 1],\n  [-1, -1],\n  [1, 0],\n  [-1, 0]\n]\n\nfunction App() {\n  const [grid, setGrid] = useState(() => {\n    const rows = [];\n    for (let i = 0; i< numRows; i++) {\n      rows.push(Array.from(Array(numCols), () => 0))\n    }\n    return rows\n  })\n\n\n\n\n  const [running, setRunning] = useState(false);\n\n  const runningRef = useRef(running);\n  runningRef.current = running\n\n  const runSimulation = useCallback(() => {\n    if (!runningRef.current) {\n      return\n    }\n\n    setGrid((g) => {\n      return produce(g, gridCopy => {\n        for (let i =0; i< numRows; i++) {\n        for (let k = 0; k < numCols; k++) {\n            let neighbours = 0;\n            operations.forEach(([x, y]) => {\n              const newI = i + x;\n              const newK = k + y;\n              if (newI >= 0 && newI < numRows && newK >= 0 && newK < numCols) {\n                neighbours += g[newI][newK]\n              }\n            })\n\n            if (neighbours < 2 || neighbours > 3) {\n              gridCopy[i][k] = 0\n            } else if (g[i][k] === 0 && neighbours ===3 ) {\n              gridCopy[i][k] =1;\n            }\n          }\n        }\n      })\n    })\n    \n    /// simulate\n    \n    setTimeout(runSimulation, 100);\n  }, [])\n  \n\n  return (\n    <>\n    <button onClick={() =>{\n        setRunning(!running)\n        if( !running ) {\n          runningRef.current = true\n          runSimulation();\n        } \n    }}>{running ? 'stop' : 'start'}</button>\n    <div  style= {{\n      display: 'grid',\n      gridTemplateColumns: `repeat(${numCols}, 20px)`,\n    }}>\n      {grid.map((rows, i) => rows.map((col,k) => <div \n      key = {`${i} - ${k}`}\n      onClick = {() => {\n        const newGrid = produce(grid, gridCopy => {\n          gridCopy[i][k] = grid[i][k] ? 0 : 1;\n        })\n        setGrid(newGrid)\n      }}\n      style = {\n        {\n          width : 20,\n          height: 20,\n          backgroundColor: grid[i][k] ? 'pink' : undefined,\n          border: \"solid 1px black\"\n        }\n      }/>))}\n    </div>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}